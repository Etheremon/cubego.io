const guiElements = []; let GUIstyle = null; let GUItheme = null; class GUIManager {
  constructor(canvas, css, options) { this.canvasCss = css; this.canvas = canvas; this.groups = []; this.pixelToPercent = false; this.guiVisible = true; if (options) { this.pixel = options.pixel; this.themeRoot = options.themeRoot || ''; this.theme = options.themeGUI || 'default'; } else { this.pixel = true; this.themeRoot = ''; this.theme = 'default'; } this.head = document.head || document.getElementsByTagName('head')[0] || null; this.html = document.body || document.getElementsByTagName('body')[0]; if (this.head == null) { this.header = document.createElement('head'); this.head.appendChild(this.header); } this.addStyle(this.canvasCss, options, this.theme); }

  addGuiElements(elem) { guiElements.push(elem); }

  static setConvertPixelToPercent(value) { this.pixelToPercent = value; }

  static getConvertPixelToPercent() { return this.pixelToPercent; }

  convertPixelToPercentWidth(pixel) { const screenWidth = window.innerWidth; const valueWidth = (pixel / screenWidth) * 100; return valueWidth; }

  convertPixelToPercentHeight(pixel) { const screenHeight = window.innerHeight; const valueHeight = (pixel / screenHeight) * 100; return valueHeight; }

  addStyle(css, options, theme) { if (css) { if (GUIstyle == null) { GUIstyle = document.createElement('style'); GUIstyle.type = 'text/css'; GUIstyle.media = 'screen'; GUIstyle.id = 'styleGUI'; if (GUIstyle.styleSheet) { GUIstyle.styleSheet.cssText = this.canvasCss; } else { GUIstyle.appendChild(document.createTextNode(this.canvasCss)); } this.head.appendChild(GUIstyle); } } if (theme && options) { if (GUItheme == null) { GUItheme = document.createElement('link'); GUItheme.type = 'text/css'; GUItheme.rel = 'stylesheet'; GUItheme.media = 'screen'; GUItheme.id = 'themeGUI'; GUItheme.href = `${this.themeRoot}themesGUI/${theme}.css`; this.head.appendChild(GUItheme); } } }

  fadeOut(el) { if (el) { el.style.opacity = 1; (function fade_moin() { if ((el.style.opacity -= 0.1) < 0.1) { el.style.display = 'none'; el.style.opacity = 0; } else if (el.style.opacity > 0) { requestAnimationFrame(fade_moin); } }()); } }

  fadeIn(el) { if (el) { el.style.opacity = 0; el.style.display = 'block'; (function fade_plus() { let val = parseFloat(el.style.opacity); if (!((val += 0.1) > 0.9)) { el.style.opacity = 1; requestAnimationFrame(fade_plus); } }()); } }

  getElementById(id) { return document.getElementById(id); }

  getCanvasOrigine() { const canvas = document.getElementsByTagName('canvas')[0]; const offsets = canvas.getBoundingClientRect(); const offsetsTop = offsets.top || 0; const offsetsLeft = offsets.left || 0; return { top: offsetsTop, left: offsetsLeft }; }

  getCanvasSize() { const canvas = document.getElementsByTagName('canvas')[0]; const offsets = canvas.getBoundingClientRect(); const offsetsWidth = offsets.width || 0; const offsetsHeight = offsets.height || 0; return { width: offsetsWidth, height: offsetsHeight }; }

  dispose() { guiElements.forEach((e) => { if (this.getElementById(e.id)) { this.html.removeChild(this.getElementById(e.id)); } }); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.guiVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.guiVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { guiElements.forEach((e) => { this.getElementById(e.id).style.display = display; }); } }

  isVisible() { return this.guiVisible; }
}(function (window) {
  const { document } = window; var
    nativeColorGUI = {
      started: false,
      color: '#000000',
      inputs: {},
      hasNativeColorSupport: false,
      init(inputId) {
        this.start(); if (this.hasNativeColorSupport) { return; } if (typeof inputId !== 'string') { throw 'inputId have to be a string id selector'; } this.input = (this.inputs[inputId] = this.inputs[inputId]) || document.getElementById(inputId); if (!this.input) { throw `There was no input found with id:"${inputId}"`; } this.input.value = this.color; this.input.unselectable = 'on'; this.css(this.input, {
          backgroundColor: this.color, borderWidth: '0.4em 0.3em', width: '3em', cursor: 'default',
        }); this.input.onfocus = function () { nativeColorPicker.onFocus(this.id); };
      },
      start() { if (this.started) { return; } try { this.hasNativeColorSupport = !!(document.createElement('input').type = 'color'); } catch (e) {} if (!this.hasNativeColorSupport) { const object_element = document.createElement('object'); object_element.classid = 'clsid:3050f819-98b5-11cf-bb82-00aa00bdce0b'; object_element.id = 'colorHelperObj'; this.css(object_element, { width: '0', height: '0' }); document.body.appendChild(object_element); } this.started = true; },
      destroy(inputId) { if (typeof inputId === 'string') { this.off(this.inputs[inputId]); } else { document.body.removeChild(document.getElementById('colorHelperObj')); for (const i in this.inputs) { this.off(this.inputs[i]); } this.started = false; } },
      off(input) {
        input.onfocus = null; this.css(input, {
          backgroundColor: '', borderWidth: '', width: '', cursor: '',
        });
      },
      onFocus(inputId) { this.input = this.inputs[inputId]; this.color = this.getColor(); this.input.value = this.color; nativeColorGUI.css(this.input, { backgroundColor: this.color, color: this.color }); this.input.blur(); },
      getColor() { let hex = colorHelperObj.ChooseColorDlg(this.color.replace(/#/, '')).toString(16); if (hex.length < 6) { const tmpstr = '000000'.substring(0, 6 - hex.length); hex = tmpstr.concat(hex); } return `#${hex}`; },
      css(el, props) { for (const prop in props) { el.style[prop] = props[prop]; } },
    }; window.nativeColorGUI = nativeColorGUI;
}(window)); var CASTORGUI = CASTORGUI || {}; !(function (moduleName, definition) { if (typeof define === 'function' && typeof define.amd === 'object') { define(definition); } else { this[moduleName] = definition(); } }('draggable', () => { let currentElement; const fairlyHighZIndex = '10'; CASTORGUI.addEventListener = function (element, eventName, handler) { if (element.addEventListener) { element.addEventListener(eventName, handler, false); } else if (element.attachEvent) { element.attachEvent(`on${eventName}`, handler); } else { element[`on${eventName}`] = handler; } }; CASTORGUI.removeEventListener = function (element, eventName, handler) { if (element.removeEventListener) { element.removeEventListener(eventName, handler, false); } else if (element.detachEvent) { element.detachEvent(`on${eventName}`, handler); } else { element[`on${eventName}`] = null; } }; CASTORGUI.draggable = function (element, handle) { handle = handle || element; CASTORGUI.setPositionType(element); CASTORGUI.setDraggableListeners(element); CASTORGUI.addEventListener(handle, 'mousedown', (event) => { CASTORGUI.startDragging(event, element); }); }; CASTORGUI.setPositionType = function (element) { element.style.position = 'absolute'; }; CASTORGUI.setDraggableListeners = function (element) { element.draggableListeners = { start: [], drag: [], stop: [] }; element.whenDragStarts = CASTORGUI.addListener(element, 'start'); element.whenDragging = CASTORGUI.addListener(element, 'drag'); element.whenDragStops = CASTORGUI.addListener(element, 'stop'); }; CASTORGUI.startDragging = function (event, element) { currentElement && CASTORGUI.sendToBack(currentElement); currentElement = CASTORGUI.bringToFront(element); const initialPosition = CASTORGUI.getInitialPosition(currentElement); currentElement.style.left = CASTORGUI.inPixels(initialPosition.left); currentElement.style.top = CASTORGUI.inPixels(initialPosition.top); currentElement.lastXPosition = event.clientX; currentElement.lastYPosition = event.clientY; const okToGoOn = CASTORGUI.triggerEvent('start', { x: initialPosition.left, y: initialPosition.top, mouseEvent: event }); if (!okToGoOn) { return; }CASTORGUI.addDocumentListeners(); }; CASTORGUI.addListener = function (element, type) { return function (listener) { element.draggableListeners[type].push(listener); }; }; CASTORGUI.triggerEvent = function (type, args) { let result = true; const listeners = currentElement.draggableListeners[type]; for (let i = listeners.length - 1; i >= 0; i--) { if (listeners[i](args) === false) { result = false; } } return result; }; CASTORGUI.sendToBack = function (element) { const decreasedZIndex = fairlyHighZIndex - 1; element.style['z-index'] = decreasedZIndex; element.style.zIndex = decreasedZIndex; }; CASTORGUI.bringToFront = function (element) { element.style['z-index'] = fairlyHighZIndex; element.style.zIndex = fairlyHighZIndex; return element; }; CASTORGUI.addDocumentListeners = function () { CASTORGUI.addEventListener(document, 'selectstart', CASTORGUI.cancelDocumentSelection); CASTORGUI.addEventListener(document, 'mousemove', CASTORGUI.repositionElement); CASTORGUI.addEventListener(document, 'mouseup', CASTORGUI.removeDocumentListeners); CASTORGUI.addEventListener(document, 'touchstart', CASTORGUI.cancelDocumentSelection); CASTORGUI.addEventListener(document, 'touchmove', CASTORGUI.repositionElement); CASTORGUI.addEventListener(document, 'touchend', CASTORGUI.removeDocumentListeners); CASTORGUI.addEventListener(document, 'touchcancel', CASTORGUI.removeDocumentListeners); }; CASTORGUI.getInitialPosition = function (element) { const boundingClientRect = element.getBoundingClientRect(); return { top: boundingClientRect.top, left: boundingClientRect.left }; }; CASTORGUI.inPixels = function (value) { return `${value}px`; }; CASTORGUI.cancelDocumentSelection = function (event) { event.preventDefault && event.preventDefault(); event.stopPropagation && event.stopPropagation(); event.returnValue = false; return false; }; CASTORGUI.repositionElement = function (event) { event.preventDefault && event.preventDefault(); event.returnValue = false; const { style } = currentElement; const elementXPosition = parseInt(style.left, 10); const elementYPosition = parseInt(style.top, 10); const elementNewXPosition = elementXPosition + (event.clientX - currentElement.lastXPosition); const elementNewYPosition = elementYPosition + (event.clientY - currentElement.lastYPosition); style.left = CASTORGUI.inPixels(elementNewXPosition); style.top = CASTORGUI.inPixels(elementNewYPosition); currentElement.lastXPosition = event.clientX; currentElement.lastYPosition = event.clientY; CASTORGUI.triggerEvent('drag', { x: elementNewXPosition, y: elementNewYPosition, mouseEvent: event }); }; CASTORGUI.removeDocumentListeners = function (event) { CASTORGUI.removeEventListener(document, 'selectstart', CASTORGUI.cancelDocumentSelection); CASTORGUI.removeEventListener(document, 'mousemove', CASTORGUI.repositionElement); CASTORGUI.removeEventListener(document, 'mouseup', CASTORGUI.removeDocumentListeners); CASTORGUI.removeEventListener(document, 'touchstart', CASTORGUI.cancelDocumentSelection); CASTORGUI.removeEventListener(document, 'touchmove', CASTORGUI.repositionElement); CASTORGUI.removeEventListener(document, 'touchend', CASTORGUI.removeDocumentListeners); CASTORGUI.removeEventListener(document, 'touchcancel', CASTORGUI.removeDocumentListeners); const left = parseInt(currentElement.style.left, 10); const top = parseInt(currentElement.style.top, 10); CASTORGUI.triggerEvent('stop', { x: left, y: top, mouseEvent: event }); }; return CASTORGUI.draggable; })); class GUIWindow extends GUIManager {
  constructor(id, options, guimanager) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.windowPosition = { x: options.x, y: options.y }; this.windowSize = { width: options.w, height: options.h }; this.colorWindow = options.backgroundColor || null; this.imageWindow = options.backgroundImage || null; this.colorContent = options.colorContent || null; this.imageContent = options.imageContent; this.buttonClose = typeof options.closeButton; this.overflow = options.overflow || 'auto'; this.borderWindow = options.borderWindow || null; this.borderTitle = options.borderTitle || null; this.heightTitle = options.heightTitle || 30; this.fontSize = options.titleFontSize || 12; this.radiusWindow = options.radiusWindow || 8; this.colorTitle = options.colorTitle || 'rgba(0, 0, 0, 0.4)'; this.imageTitle = options.imageTitle || null; this.textAlign = options.titleTextAlign || 'center'; this.colorTextTitle = options.titleColor || null; this.title = options.textTitle || 'Title'; if (options.draggable == true || options.draggable == undefined) { this.draggable = true; } else { this.draggable = false; } this.zIndex = options.zIndex || 0; this.windowVisible = false; this.addElement(); }

  addElement() { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const window = document.createElement('div'); window.style.position = 'absolute'; window.style.width = `${this.windowSize.width}px`; window.style.height = `${this.windowSize.height}px`; if (GUIManager.convertPixelToPercent == true) { window.style.top = `${this.convertPixelToPercentHeight(this.windowPosition.y + this.getCanvasOrigine().top)}%`; window.style.left = `${this.convertPixelToPercentWidth(this.windowPosition.x + this.getCanvasOrigine().left)}%`; } else { window.style.top = (this.windowPosition.y + this.getCanvasOrigine().top) + signe; window.style.left = (this.windowPosition.x + this.getCanvasOrigine().left) + signe; }window.style.borderRadius = `${this.radiusWindow}px`; window.id = this.id; window.name = this.id; window.className = 'GUIWindow'; window.style.zIndex = this.zIndex || 0; window.style.backgroundColor = this.colorWindow; window.style.backgroundImage = `url(${this.imageWindow})`; window.style.border = this.borderWindow; window.style.wordWrap = 'break-word'; window.style.display = 'none'; const titreWindow = document.createElement('div'); titreWindow.className = 'titleWindoWGUI'; titreWindow.style.width = `${this.windowSize.width}px`; titreWindow.style.height = `${this.heightTitle}px`; titreWindow.style.textAlign = this.textAlign; titreWindow.style.fontSize = `${this.fontSize}px`; titreWindow.style.borderRadius = `${this.radiusWindow}px ${this.radiusWindow}px 0 0`; titreWindow.id = `${this.id}_titre`; titreWindow.style.backgroundColor = this.colorTitle; titreWindow.style.backgroundImage = `url(${this.imageTitle})`; titreWindow.style.borderBottom = this.borderTitle; if (this.draggable == true) { titreWindow.ondragstart = draggable(window, titreWindow); titreWindow.style.cursor = 'move'; }titreWindow.innerHTML = this.title; titreWindow.style.zIndex = this.zIndex + 1; titreWindow.style.color = this.colorTextTitle; titreWindow.style.wordWrap = 'break-word'; const that = this; if (this.buttonClose == true || this.buttonClose == 'undefined') { var close = document.createElement('button'); close.innerHTML = 'X'; close.id = `${this.id}_button`; close.style.position = 'absolute'; close.style.borderRadius = '12px'; close.style.left = `${this.windowSize.width - 12}px`; close.style.marginTop = '-12px'; close.style.width = '24px'; close.style.height = '24px'; close.style.zIndex = 10000; close.onclick = function () { that.getElementById(that.id).style.display = 'none'; that.windowVisible = false; }; } const contentWindow = document.createElement('div'); contentWindow.id = `${this.id}_content`; contentWindow.style.width = `${this.windowSize.width}px`; contentWindow.style.height = `${this.windowSize.height - 38}px`; contentWindow.style.overflow = this.overflow; contentWindow.style.wordBreak = 'keep-all'; contentWindow.style.marginTop = '0px'; contentWindow.style.paddingTop = '5px'; contentWindow.style.borderRadius = '8px'; contentWindow.style.backgroundColor = this.colorContent; contentWindow.style.backgroundImage = `url(${this.imageContent})`; contentWindow.style.zIndex = this.zIndex + 2; this.html.appendChild(window); this.getElementById(this.id).appendChild(titreWindow); if (this.buttonClose == true || this.buttonClose == 'undefined') { this.getElementById(`${this.id}_titre`).appendChild(close); } this.getElementById(this.id).appendChild(contentWindow); this.addGuiElements(window); }

  add(element) { const contentForm = this.getElementById(`${this.id}_content`); contentForm.style.zIndex = this.zIndex + 1; element.addElement(false, contentForm); }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.windowVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.windowVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.windowVisible; }
} class GUITexture extends GUIManager {
  constructor(id, imageUrl, options, guimanager, callback, append = true) { super(); this.id = id; this.imageUrl = imageUrl; this.textureClicked = callback || false; this.imageSize = { width: options.w, height: options.h }; this.imagePosition = { x: options.x, y: options.y }; this.imageVisible = true; this.zIndex = options.zIndex || 1; this.html = document.body || document.getElementsByTagName('body')[0]; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const img = document.createElement('img'); img.src = this.imageUrl; img.style.width = `${this.imageSize.width}px`; img.style.height = `${this.imageSize.height}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { img.style.top = `${this.convertPixelToPercentHeight(this.imagePosition.y + this.getCanvasOrigine().top)}%`; img.style.left = `${this.convertPixelToPercentWidth(this.imagePosition.x + this.getCanvasOrigine().left)}%`; } else { img.style.top = `${this.imagePosition.y}px`; img.style.left = `${this.imagePosition.x}px`; } } else if (append == true) { img.style.top = (this.imagePosition.y + this.getCanvasOrigine().top) + signe; img.style.left = (this.imagePosition.x + this.getCanvasOrigine().left) + signe; } else { img.style.top = this.imagePosition.y + signe; img.style.left = this.imagePosition.x + signe; }img.style.position = 'absolute'; img.style.zIndex = this.zIndex; img.id = this.id; img.name = this.id; img.className = 'GUITexture'; if (this.textureClicked) { const that = this; img.addEventListener('click', that.textureClicked, false); } if (append == true) { this.html.appendChild(img); } else { element.appendChild(img); } this.addGuiElements(img); }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.imageVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.imageVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.imageVisible; }
} class GUITextfield extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.textfieldPosition = { x: options.x, y: options.y }; this.textfieldSize = { width: options.w, height: options.h }; this.value = options.value || ''; this.background = options.background || null; this.border = options.border || null; this.color = options.color || null; this.placeholder = options.placeholder || ''; this.zIndex = options.zIndex || 2; this.textfieldVisible = true; this.onchangeTextfield = callback || ''; this.tabindex = options.tabindex || 0; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const textfield = document.createElement('input'); textfield.type = 'text'; textfield.style.width = `${this.textfieldSize.width}px`; textfield.style.height = `${this.textfieldSize.height}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { textfield.style.top = `${this.convertPixelToPercentHeight(this.textfieldPosition.y + this.getCanvasOrigine().top)}%`; textfield.style.left = `${this.convertPixelToPercentWidth(this.textfieldPosition.x + this.getCanvasOrigine().left)}%`; } else { textfield.style.top = `${this.textfieldPosition.y}px`; textfield.style.left = `${this.textfieldPosition.x}px`; } } else if (append == true) { textfield.style.top = (this.textfieldPosition.y + this.getCanvasOrigine().top) + signe; textfield.style.left = (this.textfieldPosition.x + this.getCanvasOrigine().left) + signe; } else { textfield.style.top = this.textfieldPosition.y + signe; textfield.style.left = this.textfieldPosition.x + signe; }textfield.style.position = 'absolute'; textfield.style.display = 'block'; textfield.id = this.id; textfield.name = this.id; textfield.className = 'GUITextfield'; textfield.tabindex = this.tabindex; textfield.value = this.value; textfield.placeholder = this.placeholder; textfield.style.zIndex = this.zIndex; if (this.background != null) { textfield.style.background = this.background; }textfield.style.border = this.border; if (this.color != null) { textfield.style.color = this.color; }textfield.onchange = this.onchangeTextfield; if (append == true) { this.html.appendChild(textfield); } else { element.appendChild(textfield); } this.addGuiElements(textfield); }

  getValue() { return this.getElementById(this.id).value; }

  setValue(val) { this.value = val; this.getElementById(this.id).value = val; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.textfieldVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.textfieldVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.textfieldVisible; }
} class GUITextarea extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.textareaPosition = { x: options.x, y: options.y }; this.textareaSize = { width: options.w, height: options.h }; this.value = options.value || ''; this.placeholder = options.placeholder || ''; this.background = options.background || null; this.color = options.color || null; this.zIndex = options.zIndex || 2; this.textareaVisible = true; this.onchangeTextarea = callback || ''; this.tabindex = options.tabindex || 0; if (append == true) { this.addElement(this.append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const textarea = document.createElement('textarea'); textarea.cols = this.textareaSize.width; textarea.rows = this.textareaSize.height; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { textarea.style.top = `${this.convertPixelToPercentHeight(this.textareaPosition.y + this.getCanvasOrigine().top)}%`; textarea.style.left = `${this.convertPixelToPercentWidth(this.textareaPosition.x + this.getCanvasOrigine().left)}%`; } else { textarea.style.top = `${this.textareaPosition.y}px`; textarea.style.left = `${this.textareaPosition.x}ox`; } } else if (append == true) { textarea.style.top = (this.textareaPosition.y + this.getCanvasOrigine().top) + signe; textarea.style.left = (this.textareaPosition.x + this.getCanvasOrigine().left) + signe; } else { textarea.style.top = this.textareaPosition.y + signe; textarea.style.left = this.textareaPosition.x + signe; }textarea.style.position = 'absolute'; textarea.style.display = 'block'; textarea.placeholder = this.placeholder; textarea.id = this.id; textarea.name = this.id; textarea.className = 'GUITextarea'; textarea.tabindex = this.tabindex; textarea.innerHTML = this.value; textarea.style.zIndex = this.zIndex; if (this.background != null) { textarea.style.background = this.background; } if (this.color != null) { textarea.style.color = this.color; }textarea.onchange = this.onchangeTextarea; if (append == true) { this.html.appendChild(textarea); } else { element.appendChild(textarea); } this.addGuiElements(textarea); }

  getValue() { return this.getElementById(this.id).value; }

  setValue(val) { this.value = val; this.getElementById(this.id).value = val; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.textareaVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.textareaVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.textareaVisible; }
} class GUIText extends GUIManager {
  constructor(id, options, guimanager, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.textPosition = { x: options.x, y: options.y }; this.textSize = options.size || 30; this.color = options.color || null; this.background = options.background || null; this.police = options.police || null; this.texte = options.text || 'CastorGUI'; this.zIndex = options.zIndex || 1; this.bold = options.bold || null; this.italic = options.italic || null; this.position = options.position || 'absolute'; this.centerVertical = options.centerVertical || false; this.centerHorizontal = options.centerHorizontal || false; this.inline = options.inline || false; this.textVisible = true; this.textElement = null; this.font = null; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } this.font = `${this.textSize}px ${this.police}`; this.textElement = document.createElement('span'); if (this.inline == false) { this.textElement.style.width = 'auto'; } else { this.textElement.style.width = `${GUIText.getTextWidth(this.texte, this.font).w}px`; } this.textElement.style.height = `${GUIText.getTextWidth(this.texte, this.font).h}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { this.textElement.style.top = `${this.convertPixelToPercentHeight(this.textPosition.y + this.getCanvasOrigine().top)}%`; this.textElement.style.left = `${this.convertPixelToPercentWidth(this.textPosition.x + this.getCanvasOrigine().left)}%`; } else { this.textElement.style.top = `${this.textPosition.y}px`; this.textElement.style.left = `${this.textPosition.x}px`; } } else if (append == true) { this.textElement.style.top = (this.textPosition.y + this.getCanvasOrigine().top) + signe; this.textElement.style.left = (this.textPosition.x + this.getCanvasOrigine().left) + signe; } else { this.textElement.style.top = this.textPosition.y + signe; this.textElement.style.left = this.textPosition.x + signe; } this.textElement.style.display = 'block'; this.textElement.style.position = this.position; this.textElement.style.font = this.font; this.textElement.style.color = this.color; this.textElement.style.background = this.background; this.textElement.style.fontStyle = this.italic; this.textElement.style.fontWeight = this.bold; this.textElement.innerHTML = this.texte; this.textElement.id = this.id; this.textElement.name = this.id; this.textElement.className = 'GUIText'; this.textElement.style.zIndex = this.zIndex; if (append == true) { if (this.centerVertical) { const marginTop = ((this.getCanvasSize().height / 2) - (GUIText.getTextWidth(this.texte, this.font).h / 2)); this.textElement.style.top = (marginTop + this.getCanvasOrigine().top) + signe; } if (this.centerHorizontal) { const marginTotal = (this.getCanvasSize().width - GUIText.getTextWidth(this.texte, this.font).w); const marginLeft = (marginTotal / 2); this.textElement.style.left = (marginLeft + this.getCanvasOrigine().left) + signe; } this.html.appendChild(this.textElement); } else { if (this.centerVertical) { this.textElement.style.top = `calc(50% - ${GUIText.getTextWidth(this.texte, this.font).h / 2}px)`; } if (this.centerHorizontal == 'true') { this.textElement.style.width = '100%'; this.textElement.style.textAlign = 'center'; }element.appendChild(this.textElement); } this.addGuiElements(this.textElement); }

  updateText(texte) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } if (this.append == true) { this.textElement.style.width = GUIText.getTextWidth(texte, this.font).w + signe; this.textElement.style.height = GUIText.getTextWidth(texte, this.font).h + signe; this.textElement.style.top = (this.textPosition.y + this.getCanvasOrigine().top) + signe; this.textElement.style.left = (this.textPosition.x + this.getCanvasOrigine().left) + signe; } else { this.textElement.style.top = this.textPosition.y + signe; this.textElement.style.left = this.textPosition.x + signe; } if (this.centerVertical == 'true') { const marginTop = ((this.getCanvasSize().height / 2) - (GUIText.getTextWidth(texte, this.font).h / 2)); this.textElement.style.top = (marginTop + this.getCanvasOrigine().top) + signe; } if (this.centerHorizontal == 'true') { const marginTotal = (this.getCanvasSize().width - GUIText.getTextWidth(texte, this.font).w); const marginLeft = (marginTotal / 2); this.textElement.style.left = (marginLeft + this.getCanvasOrigine().left) + signe; } this.textElement.innerHTML = texte; }

  static getTextWidth(texte, font) { const tag = document.createElement('div'); tag.style.position = 'absolute'; tag.style.left = '-999em'; tag.style.display = 'block'; tag.style.whiteSpace = 'nowrap'; tag.style.font = font || `${this.textSize}px ${this.police}`; tag.innerHTML = texte; document.body.appendChild(tag); const result = { w: tag.clientWidth + 10, h: tag.clientHeight }; document.body.removeChild(tag); return result; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.textVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.textVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.textVisible; }
} class GUITextLink extends GUIManager {
  GUITextLink(id, options, guimanager, append = true) { this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.textPosition = { x: options.x, y: options.y }; this.textSize = options.size || 30; this.color = options.color || null; this.background = options.background || null; this.police = options.police || null; this.texte = options.text || 'google.com'; this.zIndex = options.zIndex || 1; this.bold = options.bold || null; this.italic = options.italic || null; this.position = options.position || 'absolute'; this.centerVertical = options.centerVertical || false; this.centerHorizontal = options.centerHorizontal || false; this.inline = options.inline || false; this.textVisible = true; this.textElement = null; this.font = null; this.href = options.href || 'https:\/\/www.google.com'; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } this.font = `${this.textSize}px ${this.police}`; this.textElement = document.createElement('a'); if (this.inline == false) { this.textElement.style.width = 'auto'; } else { this.textElement.style.width = `${GUITextLink.getTextWidth(this.texte, this.font).w}px`; } this.textElement.style.height = `${GUITextLink.getTextWidth(this.texte, this.font).h}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { this.textElement.style.top = `${this.convertPixelToPercentHeight(this.textPosition.y + this.getCanvasOrigine().top)}%`; this.textElement.style.left = `${this.convertPixelToPercentWidth(this.textPosition.x + this.getCanvasOrigine().left)}%`; } else { this.textElement.style.top = `${this.textPosition.y}px`; this.textElement.style.left = `${this.textPosition.x}px`; } } else if (append == true) { this.textElement.style.top = (this.textPosition.y + this.getCanvasOrigine().top) + signe; this.textElement.style.left = (this.textPosition.x + this.getCanvasOrigine().left) + signe; } else { this.textElement.style.top = this.textPosition.y + signe; this.textElement.style.left = this.textPosition.x + signe; } this.textElement.style.display = 'block'; this.textElement.style.position = this.position; this.textElement.style.font = this.font; this.textElement.style.color = this.color; this.textElement.style.background = this.background; this.textElement.style.fontStyle = this.italic; this.textElement.style.fontWeight = this.bold; this.textElement.innerHTML = this.texte; this.textElement.id = this.id; this.textElement.name = this.id; this.textElement.className = 'GUITextLink'; this.textElement.style.zIndex = this.zIndex; this.textElement.setAttribute('href', this.href); if (append == true) { if (this.centerVertical) { const marginTop = ((this.getCanvasSize().height / 2) - (GUITextLink.getTextWidth(this.texte, this.font).h / 2)); this.textElement.style.top = (marginTop + this.getCanvasOrigine().top) + signe; } if (this.centerHorizontal) { const marginTotal = (this.getCanvasSize().width - GUITextLink.getTextWidth(this.texte, this.font).w); const marginLeft = (marginTotal / 2); this.textElement.style.left = (marginLeft + this.getCanvasOrigine().left) + signe; } this.html.appendChild(this.textElement); } else { if (this.centerVertical) { this.textElement.style.top = `calc(50% - ${GUITextLink.getTextWidth(this.texte, this.font).h / 2}px)`; } if (this.centerHorizontal == 'true') { this.textElement.style.width = '100%'; this.textElement.style.textAlign = 'center'; }element.appendChild(this.textElement); } this.addGuiElements(this.textElement); }

  updateText(texte) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } if (this.append == true) { this.textElement.style.width = GUITextLink.getTextWidth(texte, this.font).w + signe; this.textElement.style.height = GUITextLink.getTextWidth(texte, this.font).h + signe; this.textElement.style.top = (this.textPosition.y + this.getCanvasOrigine().top) + signe; this.textElement.style.left = (this.textPosition.x + this.getCanvasOrigine().left) + signe; } else { this.textElement.style.top = this.textPosition.y + signe; this.textElement.style.left = this.textPosition.x + signe; } if (this.centerVertical == 'true') { const marginTop = ((this.getCanvasSize().height / 2) - (GUITextLink.getTextWidth(texte, this.font).h / 2)); this.textElement.style.top = (marginTop + this.getCanvasOrigine().top) + signe; } if (this.centerHorizontal == 'true') { const marginTotal = (this.getCanvasSize().width - GUITextLink.getTextWidth(texte, this.font).w); const marginLeft = (marginTotal / 2); this.textElement.style.left = (marginLeft + this.getCanvasOrigine().left) + signe; } this.textElement.innerHTML = texte; }

  static getTextWidth(texte, font) { const tag = document.createElement('div'); tag.style.position = 'absolute'; tag.style.left = '-999em'; tag.style.display = 'block'; tag.style.whiteSpace = 'nowrap'; tag.style.font = font || `${this.textSize}px ${this.police}`; tag.innerHTML = texte; document.body.appendChild(tag); const result = { w: tag.clientWidth + 10, h: tag.clientHeight }; document.body.removeChild(tag); return result; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.textVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.textVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.textVisible; }
} class GUISlider extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.sliderPosition = { x: options.x, y: options.y }; this.sliderSize = { width: options.w, height: options.h }; this.min = options.min || 0; this.max = options.max || 100; this.step = options.step || 1; this.value = options.value || (this.max / 2); this.zIndex = options.zIndex || 1; this.orient = options.orient || 'horizontal'; this.sliderVisible = true; this.onchangeSlider = callback || false; this.tabindex = options.tabindex || 0; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const slider = document.createElement('input'); slider.type = 'range'; slider.min = this.min; slider.max = this.max; slider.value = this.value; slider.step = this.step; slider.className = 'GUISlider'; slider.tabindex = this.tabindex; slider.style.width = `${this.sliderSize.width}px`; slider.style.height = `${this.sliderSize.height}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { slider.style.top = `${this.convertPixelToPercentHeight(this.sliderPosition.y + this.getCanvasOrigine().top)}%`; slider.style.left = `${this.convertPixelToPercentWidth(this.sliderPosition.x + this.getCanvasOrigine().left)}%`; } else { slider.style.top = `${this.sliderPosition.y}px`; slider.style.left = `${this.sliderPosition.x}px`; } } else if (append == true) { slider.style.top = (this.sliderPosition.y + this.getCanvasOrigine().top) + signe; slider.style.left = (this.sliderPosition.x + this.getCanvasOrigine().left) + signe; } else { slider.style.top = this.sliderPosition.y + signe; slider.style.left = this.sliderPosition.x + signe; }slider.style.position = 'absolute'; slider.id = this.id; slider.name = this.id; slider.style.zIndex = this.zIndex; if (this.orient == 'vertical' || this.orient == 'Vertical') { slider.style.writingMode = 'bt-lr'; slider.style.WebkitAppearance = 'slider-vertical'; }slider.oninput = this.onchangeSlider; slider.onchange = this.onchangeSlider; if (append == true) { this.html.appendChild(slider); } else { element.appendChild(slider); } this.addGuiElements(slider); }

  getValue() { return this.getElementById(this.id).value; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.sliderVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.sliderVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.sliderVisible; }
} class GUISelect extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.selectPosition = { x: options.x, y: options.y }; this.selectSize = { width: options.w, height: options.h }; this.zIndex = options.zIndex || 1; this.selectVisible = true; this.onchangeSelectoptions = callback || false; this.tabindex = options.tabindex || 0; this.optionsListe = []; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const select = document.createElement('select'); select.style.width = `${this.selectSize.width}px`; select.style.height = `${this.selectSize.height}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { select.style.top = `${this.convertPixelToPercentHeight(this.selectPosition.y + this.getCanvasOrigine().top)}%`; select.style.left = `${this.convertPixelToPercentWidth(this.selectPosition.x + this.getCanvasOrigine().left)}%`; } else { select.style.top = `${this.selectPosition.y}px`; select.style.left = `${this.selectPosition.x}px`; } } else if (append == true) { select.style.top = (this.selectPosition.y + this.getCanvasOrigine().top) + signe; select.style.left = (this.selectPosition.x + this.getCanvasOrigine().left) + signe; } else { select.style.top = this.selectPosition.y + signe; select.style.left = this.selectPosition.x + signe; }select.style.position = 'absolute'; select.id = this.id; select.name = this.id; select.className = 'GUISelect'; select.tabindex = this.tabindex; select.style.zIndex = this.zIndex; select.onchange = this.onchangeSelectoptions; if (append == true) { this.html.appendChild(select); } else { element.appendChild(select); this.optionsListe.forEach((options) => { this.getElementById(this.id).appendChild(options); }); } this.addGuiElements(select); }

  addOptions(value, text) { const options = document.createElement('option'); options.value = value; options.innerHTML = text; if (this.append == false) { this.optionsListe.push(options); } else { this.getElementById(this.id).appendChild(options); } }

  findOptionSelected(withIndex) { if (withIndex == undefined)withIndex = false; const elSel = this.getElementById(this.id); const str = elSel.options[elSel.selectedIndex].text; if (withIndex == true) { return elSel.selectedIndex; } return str; }

  removeOption(value) { const elSel = this.getElementById(this.id); for (let i = 0; i <= elSel.length - 1; i++) { if (elSel.options[i].text == value) { elSel.remove(i); break; } } if (this.append == false) { for (const b in arr) { if (arr[b] == value) { arr.splice(b, 1); break; } } } }

  changeItem(oldValue, newValue) { const elSel = this.getElementById(this.id); for (let i = 0; i <= elSel.length - 1; i++) { if (elSel.options[i].text == oldValue) { elSel.options[i].text = newValue; elSel.options[i].value = newValue; break; } } }

  selectedItem(item) { const elSel = this.getElementById(this.id); for (let i = 0; i <= elSel.length - 1; i++) { if (elSel.options[i].text == item) { elSel.options[i].setAttribute('selected', true); } else { elSel.options[i].removeAttribute('selected'); } } }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.selectVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.selectVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.selectVisible; }
} class GUIRadio extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.id = id; this.name = options.name || `NameRadio${id}`; this.html = document.body || document.getElementsByTagName('body')[0]; this.radioPosition = { x: options.x, y: options.y }; this.radioSize = options.size || 1.0; this.zIndex = options.zIndex || 1; this.radioVisible = true; this.onClickRadio = callback || false; this.tabindex = options.tabindex || 0; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const radio = document.createElement('input'); radio.type = 'radio'; radio.style.width = `${this.radioSize * 16}px`; radio.style.height = `${this.radioSize * 16}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { radio.style.top = `${this.convertPixelToPercentHeight(this.radioPosition.y + this.getCanvasOrigine().top)}%`; radio.style.left = `${this.convertPixelToPercentWidth(this.radioPosition.x + this.getCanvasOrigine().left)}%`; } else { radio.style.top = `${this.radioPosition.y}px`; radio.style.left = `${this.radioPosition.x}px`; } } else if (append == true) { radio.style.top = (this.radioPosition.y + this.getCanvasOrigine().top) + signe; radio.style.left = (this.radioPosition.x + this.getCanvasOrigine().left) + signe; } else { radio.style.top = this.radioPosition.y + signe; radio.style.left = this.radioPosition.x + signe; }radio.style.position = 'absolute'; radio.style.padding = '0px'; radio.style.margin = '0px'; radio.id = this.id; radio.tabindex = this.tabindex; radio.className = 'GUIRadio'; radio.name = this.name; radio.style.zIndex = this.zIndex; radio.onclick = this.onClickRadio; if (append == true) { this.html.appendChild(radio); } else { element.appendChild(radio); } this.addGuiElements(radio); }

  isChecked() { if (this.getElementById(this.id).checked) { return true; } return false; }

  setChecked(value) { this.getElementById(this.id).checked = value; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.radioVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.radioVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.radioVisible; }
} class GUILabel extends GUIManager {
  constructor(id, options, guimanager, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.labelPosition = { x: options.x, y: options.y }; this.labelSize = { width: options.w, height: options.h }; this.textLabel = options.text; this.zIndex = options.zIndex || 1; this.labelVisible = true; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const label = document.createElement('label'); if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { label.style.top = `${this.convertPixelToPercentHeight(this.labelPosition.y + this.getCanvasOrigine().top)}%`; label.style.left = `${this.convertPixelToPercentWidth(this.labelPosition.x + this.getCanvasOrigine().left)}%`; } else { label.style.top = `${this.labelPosition.y}px`; label.style.left = `${this.labelPosition.x}px`; } } else if (append == true) { label.style.top = (this.labelPosition.y + this.getCanvasOrigine().top) + signe; label.style.left = (this.labelPosition.x + this.getCanvasOrigine().left) + signe; } else { label.style.top = this.labelPosition.y + signe; label.style.left = this.labelPosition.x + signe; }label.style.position = 'absolute'; label.id = this.id; label.name = this.id; label.className = 'GUILabel'; label.innerHTML = this.textLabel; label.style.zIndex = this.zIndex; if (append == true) { this.html.appendChild(label); } else { element.appendChild(label); } this.addGuiElements(label); }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.labelVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.labelVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.labelVisible; }
} class GUIGroup extends GUIManager {
  constructor(name, options, guimanager) { super(); this.html = document.body || document.getElementsByTagName('body')[0]; if (options) { this.groupPosition = { x: options.x, y: options.y }; } this.guiManager = guimanager; this.name = name; this.elementsGoup = []; this.guiManager.groups.push(this); this.groupVisible = true; }

  add(guiElement) { this.elementsGoup.push(guiElement); }

  dispose() { this.elementsGoup.forEach((e) => { if (that.getElementById(e.id)) { this.html.removeChild(this.getElementById(e.id)); } }); }

  setVisible(bool) { let display = null; if (bool == true) { display = 'block'; this.groupVisible = true; } else { display = 'none'; this.groupVisible = false; } this.elementsGoup.forEach((e) => { this.getElementById(e.id).style.display = display; }); }

  isVisible() { return this.groupVisible; }
} class GUIFieldset extends GUIManager {
  constructor(id, options, guimanager, append = true) { super(canvas); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.fieldsetPosition = { x: options.x, y: options.y }; this.fieldsetSize = { width: options.w, height: options.h }; this.legend = options.legend; this.zIndex = options.zIndex || 1; this.fieldsetVisible = true; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const fieldset = document.createElement('fieldset'); fieldset.style.width = `${this.fieldsetSize.width}px`; fieldset.style.height = `${this.fieldsetSize.height}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { fieldset.style.top = `${this.convertPixelToPercentHeight(this.fieldsetPosition.y + this.getCanvasOrigine().top)}%`; fieldset.style.left = `${this.convertPixelToPercentWidth(this.fieldsetPosition.x + this.getCanvasOrigine().left)}%`; } else { fieldset.style.top = `${this.fieldsetPosition.y}px`; fieldset.style.left = `${this.fieldsetPosition.x}px`; } } else if (append == true) { fieldset.style.top = (this.fieldsetPosition.y + this.getCanvasOrigine().top) + signe; fieldset.style.left = (this.fieldsetPosition.x + this.getCanvasOrigine().left) + signe; } else { fieldset.style.top = (this.fieldsetPosition.y) + signe; fieldset.style.left = (this.fieldsetPosition.x) + signe; }fieldset.style.position = 'absolute'; fieldset.id = this.id; fieldset.name = this.id; fieldset.className = 'GUIFieldset'; fieldset.style.zIndex = this.zIndex; this.html.appendChild(fieldset); const legend = document.createElement('legend'); legend.innerHTML = this.legend; if (append == true) { this.getElementById(this.id).appendChild(legend); } else { element.appendChild(legend); } this.addGuiElements(fieldset); }

  add(element) { const contentFieldSet = this.getElementById(this.id); element.addElement(false, contentFieldSet); }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.fieldsetVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.fieldsetVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.fieldsetVisible; }
} class GUICheckbox extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.checkboxPosition = { x: options.x, y: options.y }; this.checkboxSize = options.size || 1.0; this.zIndex = options.zIndex || 1.0; this.checkboxVisible = true; this.onClickCheckbox = callback || ''; this.tabindex = options.tabindex || 0; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const checkbox = document.createElement('input'); checkbox.type = 'checkbox'; checkbox.style.width = `${this.checkboxSize * 16}px`; checkbox.style.height = `${this.checkboxSize * 16}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { checkbox.style.top = `${this.convertPixelToPercentHeight(this.checkboxPosition.y + this.getCanvasOrigine().top)}%`; checkbox.style.left = `${this.convertPixelToPercentWidth(this.checkboxPosition.x + this.getCanvasOrigine().left)}%`; } else { checkbox.style.top = `${this.checkboxPosition.y}px`; checkbox.style.left = `${this.checkboxPosition.x}px`; } } else if (append == true) { checkbox.style.top = (this.checkboxPosition.y + this.getCanvasOrigine().top) + signe; checkbox.style.left = (this.checkboxPosition.x + this.getCanvasOrigine().left) + signe; } else { checkbox.style.top = this.checkboxPosition.y + signe; checkbox.style.left = this.checkboxPosition.x + signe; }checkbox.style.position = 'absolute'; checkbox.style.padding = '0px'; checkbox.style.margin = '0px'; checkbox.id = this.id; checkbox.name = this.id; checkbox.className = 'GUICheckbox'; checkbox.tabindex = this.tabindex; checkbox.style.zIndex = this.zIndex; checkbox.onclick = this.onClickCheckbox; if (append == true) { this.html.appendChild(checkbox); } else { element.appendChild(checkbox); } this.addGuiElements(checkbox); }

  isChecked() { if (this.getElementById(this.id).checked) { return true; } return false; }

  setChecked(value) { this.getElementById(this.id).checked = value; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.checkboxVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.checkboxVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.checkboxVisible; }
} class GUIButton extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.buttonPosition = { x: options.x, y: options.y }; this.buttonSize = { width: options.w, height: options.h }; this.value = options.value || 'Ok'; this.buttonVisible = true; this.onClickButton = callback || false; this.imageButton = options.backgroundImage || null; this.colorButton = options.backgroundColor || null; this.borderRadiusButton = options.borderRadiusButton || null; this.borderButton = options.borderButton || null; this.colorText = options.colorText || null; this.zIndex = options.zIndex || 1; this.tabindex = options.tabindex || 0; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const button = document.createElement('button'); button.style.width = `${this.buttonSize.width}px`; button.style.height = `${this.buttonSize.height}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { button.style.top = `${this.convertPixelToPercentHeight(this.buttonPosition.y + this.getCanvasOrigine().top)}%`; button.style.left = `${this.convertPixelToPercentWidth(this.buttonPosition.x + this.getCanvasOrigine().left)}%`; } else { button.style.top = `${this.buttonPosition.y}px`; button.style.left = `${this.buttonPosition.x}px`; } } else if (append == true) { button.style.top = (this.buttonPosition.y + this.getCanvasOrigine().top) + signe; button.style.left = (this.buttonPosition.x + this.getCanvasOrigine().left) + signe; } else { button.style.top = this.buttonPosition.y + signe; button.style.left = this.buttonPosition.x + signe; }button.innerHTML = this.value; button.style.position = 'absolute'; button.id = this.id; button.name = this.id; button.style.zIndex = this.zIndex; button.className = 'GUIButton'; button.tabindex = this.tabindex; button.style.borderRadius = this.borderRadiusButton; if (this.imageButton != null) { button.style.backgroundImage = `url(${this.imageButton})`; } else { button.style.background = this.colorButton; }button.style.border = this.borderButton; button.style.color = this.colorText; button.onclick = this.onClickButton; if (append == true) { this.html.appendChild(button); } else { element.appendChild(button); } this.addGuiElements(button); }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.buttonVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.buttonVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.buttonVisible; }
} class GUIDialog extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(canvas); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.dialogSize = { width: options.w, height: options.h }; this.dialogPosition = { x: options.x, y: options.y }; this.overflow = options.overflow || 'auto'; this.borderDialog = options.border || null; this.colorDialog = options.backgroundColor || null; this.imageDialog = options.backgroundImage || null; this.buttonDialog = options.closeDialog || 'true'; this.imageButtonDialog = options.imageButtonDialog || 'false'; this.urlImage = options.urlImage || null; this.callback = callback || null; this.radius = options.radius || 8; this.zIndex = options.zIndex || 0; this.dialogVisible = false; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const dialog = document.createElement('div'); dialog.style.width = `${this.dialogSize.width}px`; dialog.style.height = `${this.dialogSize.height}px`; if (GUIManager.getConvertPixelToPercent() == true) { dialog.style.top = `${this.convertPixelToPercentHeight(this.dialogPosition.y + this.getCanvasOrigine().top)}%`; dialog.style.left = `${this.convertPixelToPercentWidth(this.dialogPosition.x + this.getCanvasOrigine().left)}%`; } else { dialog.style.top = (this.dialogPosition.y + this.getCanvasOrigine().top) + signe; dialog.style.left = (this.dialogPosition.x + this.getCanvasOrigine().left) + signe; }dialog.style.position = 'absolute'; dialog.id = this.id; dialog.name = this.id; dialog.className = 'GUIDialog'; dialog.style.zIndex = this.zIndex; dialog.style.background = this.colorDialog; dialog.style.borderRadius = `${this.radius}px`; dialog.style.backgroundImage = `url(${this.imageDialog})`; dialog.style.border = this.borderDialog; dialog.style.display = 'none'; dialog.style.overflow = this.overflow; let eventButton = null; if (append == true) { this.html.appendChild(dialog); } else { element.appendChild(dialog); } if (this.buttonDialog == 'true') { eventButton = document.createElement('button'); eventButton.innerHTML = 'X'; eventButton.id = `${this.id}_button`; eventButton.style.position = 'absolute'; eventButton.style.borderRadius = '12px'; eventButton.style.border = '2px solid black'; eventButton.style.left = this.dialogSize.width - 12 + signe; eventButton.style.marginTop = '-12px'; eventButton.style.width = '25px'; eventButton.style.height = '25px'; eventButton.style.zIndex = 10000; eventButton.onclick = function () { document.body.removeChild(dialog); }; this.getElementById(this.id).appendChild(eventButton); } else if (this.imageButtonDialog == 'true') { this._getSizeImage(this.urlImage, (result) => { const sizeImageW = result.w; const sizeImageH = result.h; eventButton = document.createElement('img'); eventButton.src = this.urlImage; eventButton.id = `${this.id}_button`; eventButton.style.position = 'absolute'; eventButton.style.left = this.dialogSize.width - (sizeImageW / 2) + signe; eventButton.style.marginTop = `-${sizeImageH / 2}${signe}`; eventButton.style.width = sizeImageW + signe; eventButton.style.height = sizeImageH + signe; eventButton.style.cursor = 'pointer'; eventButton.style.zIndex = 10000; eventButton.onclick = this.callback; this.getElementById(this.id).appendChild(eventButton); }); } else if (this.buttonDialog == 'false' && this.imageButtonDialog == 'false' && this.callback) { dialog.onclick = this.callback; dialog.style.cursor = 'pointer'; } this.addGuiElements(dialog); }

  _getSizeImage(URL, callback) { const image = new Image(); image.src = URL; image.onload = function () { const result = { w: image.width, h: image.height }; callback(result); }; }

  add(element) { const contentDialog = this.getElementById(this.id); contentDialog.style.zIndex = this.zIndex + 1; element.style.zIndex + 2; element.addElement(false, contentDialog); }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.dialogVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.dialogVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.dialogVisible; }
} class GUIProgress extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.progress = null; this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.progressPosition = { x: options.x, y: options.y }; this.progressSize = { width: options.w, height: options.h }; this.min = options.min || 0; this.max = options.max || 100; this.value = options.value || 0; this.background = options.background || null; this.backgroundValue = options.backgroundValue || null; this.zIndex = options.zIndex || 1; this.orient = options.orient || 'horizontal'; this.progressVisible = true; this.onchangeProgress = callback || ''; this.tabindex = options.tabindex || 0; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } this.progress = document.createElement('progress'); this.progress.min = this.min; this.progress.max = this.max; this.progress.value = this.value; this.progress.style.width = `${this.progressSize.width}px`; this.progress.style.height = `${this.progressSize.height}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { this.progress.style.top = `${this.convertPixelToPercentHeight(this.progressPosition.y + this.getCanvasOrigine().top)}%`; this.progress.style.left = `${this.convertPixelToPercentWidth(this.progressPosition.x + this.getCanvasOrigine().left)}%`; } else { this.progress.style.top = `${this.progressPosition.y}px`; this.progress.style.left = `${this.progressPosition.x}px`; } } else if (append == true) { this.progress.style.top = (this.progressPosition.y + this.getCanvasOrigine().top) + signe; this.progress.style.left = (this.progressPosition.x + this.getCanvasOrigine().left) + signe; } else { this.progress.style.top = (this.progressPosition.y) + signe; this.progress.style.left = (this.progressPosition.x) + signe; } this.progress.style.position = 'absolute'; this.progress.id = this.id; this.progress.className = 'GUIProgress'; this.progress.tabindex = this.tabindex; this.progress.name = this.id; this.progress.style.zIndex = this.zIndex; if (this.orient == 'vertical' || this.orient == 'Vertical') { this.progress.style.writingMode = 'bt-lr'; this.progress.style.WebkitAppearance = 'progress-vertical'; } const cssProgress = `#${this.id} {` + `background-color:${this.background};` + `} #${this.id}::after {` + `background-color:${this.backgroundValue};` + `} #${this.id}::-webkit-progress-bar {` + `background-color:${this.background};` + `} #${this.id}::-webkit-progress-value {` + `background-color:${this.backgroundValue};` + `} #${this.id}::-moz-progress-bar {` + `background-color:${this.background};` + '}'; this.addStyle(cssProgress); this.progress.onchange = this.onchangeProgress; if (append == true) { this.html.appendChild(this.progress); } else { element.appendChild(this.progress); } this.addGuiElements(this.progress); }

  updateValue(value) { this.progress.value = value; }

  getValue() { return this.progress.value; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.progressVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.progressVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.progressVisible; }
} class GUISpinner extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.numberPosition = { x: options.x, y: options.y }; this.numberSize = { width: options.w, height: options.h }; this.min = options.min || 0; this.max = options.max || 100; this.step = options.step || 1; this.value = options.value || (this.max / 2); this.zIndex = options.zIndex || 1; this.orient = options.orient || 'horizontal'; this.numberVisible = true; this.onchangeNumber = callback || false; this.tabindex = options.tabindex || 0; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const number = document.createElement('input'); number.type = 'number'; number.min = this.min; number.max = this.max; number.value = this.value; number.step = this.step; number.style.width = this.numberSize.width + signe; number.style.height = this.numberSize.height + signe; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { number.style.top = `${this.convertPixelToPercentHeight(this.numberPosition.y + this.getCanvasOrigine().top)}%`; number.style.left = `${this.convertPixelToPercentWidth(this.numberPosition.x + this.getCanvasOrigine().left)}%`; } else { number.style.top = `${this.numberPosition.y}px`; number.style.left = `${this.numberPosition.x}px`; } } else if (append == true) { number.style.top = (this.numberPosition.y + this.getCanvasOrigine().top) + signe; number.style.left = (this.numberPosition.x + this.getCanvasOrigine().left) + signe; } else { number.style.top = this.numberPosition.y + signe; number.style.left = this.numberPosition.x + signe; }number.style.position = 'absolute'; number.id = this.id; number.name = this.id; number.className = 'GUISpinner'; number.tabindex = this.tabindex; number.style.zIndex = this.zIndex; number.oninput = this.onchangeNumber; number.onchange = this.onchangeNumber; if (append == true) { this.html.appendChild(number); } else { element.appendChild(number); } this.addGuiElements(number); }

  getValue() { return this.getElementById(this.id).value; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.numberVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.numberVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.numberVisible; }
} class GUIMeter extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.meter = null; this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.meterPosition = { x: options.x, y: options.y }; this.meterSize = { width: options.w, height: options.h }; this.border = options.border || 0; this.background = options.background || null; this.backgroundValue = options.backgroundValue || null; this.min = options.min || 0; this.max = options.max || 100; this.value = options.value || 0; this.zIndex = options.zIndex || 1; this.orient = options.orient || 'horizontal'; this.meterVisible = true; this.onchangeMeter = callback || ''; this.tabindex = options.tabindex || 0; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } this.meter = document.createElement('meter'); this.meter.min = this.min; this.meter.max = this.max; this.meter.value = this.value; this.meter.style.width = `${this.meterSize.width}px`; this.meter.style.height = `${this.meterSize.height}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { this.meter.style.top = `${this.convertPixelToPercentWidth(this.meterPosition.y + this.getCanvasOrigine().top)}%`; this.meter.style.left = `${this.convertPixelToPercentHeight(this.meterPosition.x + this.getCanvasOrigine().left)}%`; } else { this.meter.style.top = `${this.meterPosition.y}px`; this.meter.style.left = `${this.meterPosition.x}px`; } } else if (append == true) { this.meter.style.top = (this.meterPosition.y + this.getCanvasOrigine().top) + signe; this.meter.style.left = (this.meterPosition.x + this.getCanvasOrigine().left) + signe; } else { this.meter.style.top = this.meterPosition.y + signe; this.meter.style.left = this.meterPosition.x + signe; } this.meter.style.position = 'absolute'; this.meter.id = this.id; this.meter.name = this.id; this.meter.className = 'GUIMeter'; this.meter.tabindex = this.tabindex; this.meter.style.zIndex = this.zIndex; if (this.orient == 'vertical' || this.orient == 'Vertical') { this.meter.style.writingMode = 'bt-lr'; this.meter.style.WebkitAppearance = 'meter-vertical'; } this.meter.onchange = this.onchangeMeter; const cssMeter = `#${this.id} {` + `border:${this.border};` + `border-radius:${this.borderRadius};` + `background-color:${this.background};` + `} #${this.id}::after {` + `border:${this.border};` + `border-radius:${this.borderRadius};` + `background-color:${this.backgroundValue};` + `} #${this.id}::-webkit-progress-bar {` + `border:${this.border};` + `border-radius:${this.borderRadius};` + `background-color:${this.background};` + `} #${this.id}::-webkit-progress-value {` + `border:${this.border};` + `border-radius:${this.borderRadius};` + `background-color:${this.backgroundValue};` + `} #${this.id}::-moz-progress-bar {` + `border:${this.border};` + `border-radius:${this.borderRadius};` + `background-color:${this.background};` + '}'; this.addStyle(cssMeter); if (append == true) { this.html.appendChild(this.meter); } else { element.appendChild(this.meter); } this.addGuiElements(this.meter); }

  updateValue(value) { this.meter.value = value; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.meterVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.meterVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.meterVisible; }
} class GUIPanel extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.divPosition = { x: options.x, y: options.y }; this.divSize = { width: options.w, height: options.h }; this.divVisible = false; this.overflow = options.overflow || 'auto'; this.borderRadiusDiv = options.borderRadiusPanel || '10px'; this.imageDiv = options.backgroundImage || null; this.colorDiv = options.backgroundColor || null; this.borderDiv = options.borderPanel || null; this.position = options.position || 'absolute'; this.zIndex = options.zIndex || 1; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const div = document.createElement('div'); if (this.divSize.width > 0 || this.divSize.height > 0) { div.style.width = `${this.divSize.width}px`; div.style.height = `${this.divSize.height}px`; } if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { if (this.divPosition.x > 0) { div.style.left = `${this.convertPixelToPercentWidth(this.divPosition.x + this.getCanvasOrigine().left)}%`; } if (this.divPosition.y > 0) { div.style.top = `${this.convertPixelToPercentHeight(this.divPosition.y + this.getCanvasOrigine().top)}%`; } } else { if (this.divPosition.x > 0) { div.style.marginLeft = `${this.convertPixelToPercentWidth(this.divPosition.x)}%`; } if (this.divPosition.y > 0) { div.style.marginTop = `${this.convertPixelToPercentHeight(this.divPosition.y)}%`; } } } else if (append == true) { if (this.divPosition.x > 0) { div.style.left = (this.divPosition.x + this.getCanvasOrigine().left) + signe; } if (this.divPosition.y > 0) { div.style.top = (this.divPosition.y + this.getCanvasOrigine().top) + signe; } } else { if (this.divPosition.x > 0) { div.style.marginLeft = this.divPosition.x + signe; } if (this.divPosition.y > 0) { div.style.marginTop = this.divPosition.y + signe; } }div.id = this.id; div.name = this.id; div.className = 'GUIPanel'; div.style.position = this.position; div.style.overflow = this.overflow; div.style.zIndex = this.zIndex; div.style.backgroundImage = `url(${this.imageDiv})`; div.style.backgroundColor = this.colorDiv; div.style.borderRadius = this.borderRadiusDiv; div.style.border = this.borderDiv; div.style.display = 'none'; if (append == true) { this.html.appendChild(div); } else { element.appendChild(div); } this.addGuiElements(div); }

  add(element) { const contentPanel = this.getElementById(this.id); contentPanel.style.zIndex = this.zIndex + 1; element.addElement(false, contentPanel); }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.divVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.divVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.divVisible; }
} class GUIColor extends GUIManager {
  constructor(id, options, guimanager, callback, append = true) { super(); this.id = id; this.html = document.body || document.getElementsByTagName('body')[0]; this.colorPosition = { x: options.x, y: options.y }; this.colorSize = { width: options.w, height: options.h }; this.value = options.value || '#e30000'; this.zIndex = options.zIndex || 1; this.colorVisible = true; this.onchangeColor = callback || ''; this.tabindex = options.tabindex || 0; if (append == true) { this.addElement(append); } }

  addElement(append, element = null) { let signe = ''; if (this.pixel) { signe = 'px'; } else { signe = '%'; } const color = document.createElement('input'); color.type = 'color'; color.value = this.value; color.className = 'GUIColor'; color.tabindex = this.tabindex; color.style.width = `${this.colorSize.width}px`; color.style.height = `${this.colorSize.height}px`; if (GUIManager.getConvertPixelToPercent() == true) { if (append == true) { color.style.top = `${this.convertPixelToPercentHeight(this.colorPosition.y + this.getCanvasOrigine().top)}%`; color.style.left = `${this.convertPixelToPercentWidth(this.colorPosition.x + this.getCanvasOrigine().left)}%`; } else { color.style.top = `${this.colorPosition.y}px`; color.style.left = `${this.colorPosition.x}px`; } } else if (append == true) { color.style.top = (this.colorPosition.y + this.getCanvasOrigine().top) + signe; color.style.left = (this.colorPosition.x + this.getCanvasOrigine().left) + signe; } else { color.style.top = this.colorPosition.y + signe; color.style.left = this.colorPosition.x + signe; }color.style.position = 'absolute'; color.id = this.id; color.name = this.id; color.style.zIndex = this.zIndex; color.onchange = this.onchangeColor; if ((navigator.userAgent.indexOf('MSIE') != -1) || (navigator.appName == 'Netscape') || (!!document.documentMode == true) || navigator.appVersion.indexOf('Edge') > -1 || (navigator.appVersion.indexOf('Trident') == -1)) { window.nativeColorGUI.init(this.id); } if (append == true) { this.html.appendChild(color); } else { element.appendChild(color); } this.addGuiElements(color); }

  getColor(rgb) { if (rgb == undefined) { rgb = true; hex = false; } else if (rgb == true) { rgb = true; hex = false; } else { rgb = false; hex = true; } let valueColor = null; if (rgb == true) { valueColor = hexToRgb(this.getElementById(this.id).value); } else if (hex == true) { valueColor = this.getElementById(this.id).value; } return valueColor; }

  dispose() { return this.html.removeChild(this.getElementById(this.id)); }

  setVisible(bool, fade) { let display = null; if (fade == undefined)fade = true; const element = this.getElementById(this.id); if (bool == true) { display = 'block'; this.colorVisible = true; if (fade == true) { this.fadeIn(element); } } else { display = 'none'; this.colorVisible = false; if (fade == true) { this.fadeOut(element); } } if (fade == false) { element.style.display = display; } }

  isVisible() { return this.colorVisible; }
} const hexToR = function (h) { return parseInt((cutHex(h)).substring(0, 2), 16); }; const hexToG = function (h) { return parseInt((cutHex(h)).substring(2, 4), 16); }; const hexToB = function (h) { return parseInt((cutHex(h)).substring(4, 6), 16); }; var cutHex = function (h) { return (h.charAt(0) == '#') ? h.substring(1, 7) : h; }; var hexToRgb = function (hex) { const c_r = hexToR(hex) / 255; const c_g = hexToG(hex) / 255; const c_b = hexToB(hex) / 255; return { r: c_r, g: c_g, b: c_b }; }; class DataBase {
  constructor(useSessionStorage = false) { if (useSessionStorage == undefined || useSessionStorage == false) { this.database = window.localStorage; } else { this.database = window.sessionStorage; } }

  deleteDataBase() { this.database.clear(); }

  deleteTable(table) { this.database.removeItem(table); }

  deleteField(table, field) { const champ = table[field]; this.database.removeItem(champ); }

  deleteItemFromField(table, field, item) { const valeur = table[field][item]; this.database.removeItem(item); }

  addTable(table) { const empty = JSON.stringify({}); this.database.setItem(table, empty); }

  createField(table, field, value) { const data = JSON.stringify(value); const json = eval(`({${field} : ${data}})`); this.database.setItem(table, JSON.stringify(json)); }

  insertItemFromField(table, field, item, value) { const data = JSON.stringify(value); this.database.setItem(table[field][item], data); }

  selectItem(table, field, item) { const theTable = $.parseJSON(this.database[table]); return theTable[field][item]; }

  selectAllItems(table, field) { const theTable = $.parseJSON(this.database[table][field]); return theTable; }

  selectAllTable(table) { const theTable = $.parseJSON(this.database[table]); return theTable; }

  selectAllDataBase() { return$.parseJSON(this.database); }

  updateItem(table, field, item, value) { this.database[table][field][item] = value; }

  getLimit() { return this.database.length - 1; }

  isSupported() { if (typeof localStorage !== 'undefined') { return true; } return false; }
}
